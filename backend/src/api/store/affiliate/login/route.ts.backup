import { MedusaRequest, MedusaResponse } from "@medusajs/framework"
import bcrypt from "bcrypt"
import jwt from "jsonwebtoken"

/**
 * POST /store/affiliate/login
 * 聯盟夥伴登入
 */
export async function POST(req: MedusaRequest, res: MedusaResponse) {
  console.log("=== 收到登入請求 ===")
  console.log("Headers:", req.headers)
  console.log("Body:", req.body)
  
  try {
    const body = req.body as {
      email: string
      password: string
    }

    const { email, password } = body
    console.log("解析的登入資料:", { email, password: "***" })

    if (!email || !password) {
      console.log("缺少必要登入資料")
      return res.status(400).json({
        success: false,
        message: "缺少必要資料：email, password"
      })
    }

    // 直接使用資料庫連接查詢
    const connection = req.scope.resolve("__db_connection__") as any
    console.log("使用資料庫連接:", !!connection)
    
    if (!connection) {
      throw new Error("無法獲取資料庫連接")
    }

    const partnerResult = await connection.query(
      "SELECT * FROM affiliate_partner WHERE email = $1 AND deleted_at IS NULL",
      [email]
    )
    
    console.log("資料庫查詢結果:", partnerResult.rows?.length || 0, "筆")

    if (!partnerResult.rows || partnerResult.rows.length === 0) {
      return res.status(400).json({
        success: false,
        message: "此電子郵件尚未註冊聯盟帳號，請先註冊"
      })
    }

    const partner = partnerResult.rows[0]
    console.log("找到夥伴:", partner.id, partner.name)
      
      // 檢查密碼
      if (partner.password_hash) {
        const passwordMatch = await bcrypt.compare(password, partner.password_hash)
        if (!passwordMatch) {
          return res.status(400).json({
            success: false,
            message: "密碼錯誤"
          })
        }
      }

      // 生成 JWT token
      const token = jwt.sign(
        { id: partner.id, email: partner.email },
        'your-secret-key', // TODO: 使用環境變數
        { expiresIn: '24h' }
      )

      // 移除密碼相關欄位
      const { password_hash, ...safePartner } = partner

      console.log("登入成功，返回夥伴資料:", safePartner.id)

      return res.json({
        success: true,
        message: "登入成功", 
        partner: safePartner,
        token
      })

    } catch (queryError: any) {
      console.error("資料庫查詢錯誤:", queryError)
      
      // 如果遠端查詢失敗，fallback 到直接資料庫查詢
      const connection = req.scope.resolve("__db_connection__") as any
      if (connection) {
        const partnerResult = await connection.query(
          "SELECT * FROM affiliate_partner WHERE email = $1 AND deleted_at IS NULL",
          [email]
        )
        
        if (partnerResult.rows.length === 0) {
          return res.status(400).json({
            success: false,
            message: "此電子郵件尚未註冊聯盟帳號，請先註冊"
          })
        }

        const partner = partnerResult.rows[0]
        
        // 檢查密碼
        if (partner.password_hash) {
          const passwordMatch = await bcrypt.compare(password, partner.password_hash)
          if (!passwordMatch) {
            return res.status(400).json({
              success: false,
              message: "密碼錯誤"
            })
          }
        }

        // 生成 JWT token
        const token = jwt.sign(
          { id: partner.id, email: partner.email },
          'your-secret-key',
          { expiresIn: '24h' }
        )

        // 移除密碼相關欄位
        const { password_hash, ...safePartner } = partner

        return res.json({
          success: true,
          message: "登入成功", 
          partner: safePartner,
          token
        })
      }
      
      throw queryError
    }

  } catch (error: any) {
    console.error("登入錯誤:", error)
    
    return res.status(500).json({
      success: false,
      message: "登入過程中發生錯誤"
    })
  }
}
